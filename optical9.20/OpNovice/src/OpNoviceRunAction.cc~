//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file OpNovice/src/OpNoviceRunAction.cc
/// \brief Implementation of the OpNoviceRunAction class
//
//
// 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

// Make this appear first!
#include "G4Timer.hh"

#include "OpNoviceRunAction.hh"

#include "G4Run.hh"
#include "g4root.hh"
#include "G4RunManager.hh"
#include "OpNoviceEventAction.hh"
#include "G4SDManager.hh"
#include "OpNoviceHit.hh"
#include "OpNoviceSD.hh"
#include "G4THitsCollection.hh"


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceRunAction::OpNoviceRunAction()
 : G4UserRunAction(),
   fTimer(0)
{
  fTimer = new G4Timer;
  
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->OpenFile("OpNovice");
  analysisManager ->SetVerboseLevel(1);
  analysisManager->CreateH1("Number","Number of optical photons",100,0,100);
  analysisManager->CreateNtuple("T","PMT Tree");
  analysisManager->CreateNtupleIColumn(0,"TrackID");
  analysisManager->CreateNtupleDColumn(0,"Energy");
  analysisManager->CreateNtupleIColumn(0,"EventID");
  analysisManager->CreateNtupleDColumn(0,"xposition");
  analysisManager->CreateNtupleDColumn(0,"yposition");
  analysisManager->FinishNtuple(0);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

OpNoviceRunAction::~OpNoviceRunAction()
{
  delete fTimer;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceRunAction::BeginOfRunAction(const G4Run* aRun)
{
  G4cout << "### Run " << aRun->GetRunID() << " start." << G4endl;
  fTimer->Start();
  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void OpNoviceRunAction::EndOfRunAction(const G4Run* aRun)
{
  
  fTimer->Stop();
  G4cout << "number of event = " << aRun->GetNumberOfEvent()
         << " " << *fTimer << G4endl;

  // G4double ratio=static_cast<G4double>(sensitive1.TrackID.size())/sensitive.TrackID.size();
  // G4cout<<"ratio"<<ratio<<G4endl;
  //  G4cout<<"this is in RunAction"<<G4endl;
  // //   if (SDHCID ==-1){
  // G4int  SDHCID = G4SDManager::GetSDMpointer()->GetCollectionID("SDHitCollection");
  // G4int   mirrorHCID = G4SDManager::GetSDMpointer()->GetCollectionID("mirrorHitCollection");
  // // }
  //    OpNoviceHitCollection SDHC = GetHitsCollection(SDHCID,aRun);
  //    OpNoviceHitCollection mirrorHC = GetHitsCollection(mirrorHCID,aRun);

  //    OpNoviceHit SDHit = (*SDHC)[SDHC->entries()-1];
  //    OpNoviceHit mirrorHit=(*mirrorHC)[mirrorHC->entries()-1];

  //    G4cout<<"HitCounting"<< SDHIT->Getcounting()<<G4endl;
  
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  analysisManager->Write();
  analysisManager->CloseFile();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
